# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Wed Oct  7 09:24:16 2009

import wx
import  wx.lib.plot as plot
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade

class Plots(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: Plots.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER
        wx.Dialog.__init__(self, *args, **kwds)
        self.panel_8 = wx.Panel(self, -1)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: Plots.__set_properties
        self.SetTitle("view Plots")
        self.SetSize(wx.DLG_UNIT(self, wx.Size(242, 207)))
        self.panel_8.SetMinSize(wx.DLG_UNIT(self.panel_8, wx.Size(240, 207)))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: Plots.__do_layout
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(self.panel_8, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_4)
        self.Layout()
        # end wxGlade

    def plotData(self,data,title='', x_axis='X Axis', y_axis='Y Axis'):
        # set up the plotting canvas
        plot_canvas = plot.PlotCanvas(self)
        # get client usable size of frame
        frame_size = self.GetClientSize()
        # needed for SaveFile() later
        plot_canvas.SetInitialSize(size=frame_size)
        # optionally allow scrolling
        plot_canvas.SetShowScrollbars(True)
        # optionally allow drag/draw rubberband area to zoom
        # use doubleclick to return to original
        # use right click to shrink
        plot_canvas.SetEnableZoom(True)
        # set the tick and axis label font size (default is 10 point)
        plot_canvas.SetFontSizeAxis(point=8)
        # set title font size (default is 15 point)
        plot_canvas.SetFontSizeTitle(point=10)

        # connect (x, y) points in data list with a line
        # also set color and width of line
        data_line = plot.PolyLine(data, colour='blue', width=1)

        # assign lines, title and axis labels
        gc = plot.PlotGraphics([data_line],
            title, x_axis, y_axis)
        # set x and y axis ranges and then draw the plot
        plot_canvas.Draw(gc)

        # optionally save the plot to an image file
       # plot_canvas.SaveFile(fileName='sinecurve.jpg') 
# end of class Plots


